---
- name: "get users HOME"
  getent:
    database: passwd
    key: "{{ asdf_user }}"
    split: ":"
  when: asdf_dir is undefined

- name: "set asdf_config_file based on home directory"
  set_fact:
    asdf_config_file: "{{ getent_passwd[asdf_user][4] }}/.asdfrc"
  when: asdf_dir is undefined and asdf_config_file is undefined

- name: "set asdf_default_tool_versions_file based on home directory"
  set_fact:
    asdf_default_tool_versions_file: "{{ getent_passwd[asdf_user][4] }}/.tool-versions"
  when: asdf_dir is undefined and asdf_default_tool_versions_file is undefined

- name: "set asdf_dir variable based on home directory"
  set_fact:
    asdf_dir: "{{ getent_passwd[asdf_user][4] }}/.asdf"
  when: asdf_dir is undefined

- name: "set asdf_config_file variable based on asdf_dir"
  set_fact:
    asdf_config_file: "{{ asdf_dir }}/asdfrc"
  when: asdf_config_file is undefined

- name: "set asdf_default_tool_versions_file variable based on asdf_dir"
  set_fact:
    asdf_default_tool_versions_file: "{{ asdf_dir }}/tool-versions"
  when: asdf_default_tool_versions_file is undefined

- name: "install asdf global dependencies with apt"
  apt:
    name: "{{ asdf_apt_global_dependencies }}"
    update_cache: yes
    install_recommends: no
  become: True
  retries: "{{ remote_package_retries }}"
  register: apt_deps_result
  until: apt_deps_result is succeeded
  when: ansible_os_family == "Debian"

- name: "install asdf global dependencies with yum"
  yum:
    name: "{{ asdf_yum_global_dependencies }}"
    update_cache: yes
  become: True
  retries: "{{ remote_package_retries }}"
  register: yum_deps_result
  until: yum_deps_result is succeeded
  when: ansible_os_family == "RedHat"

- name: "ensure asdf_dir presence and ownership"
  file:
    path: "{{ asdf_dir }}"
    owner: "{{ asdf_user }}"
    group: "{{ asdf_group }}"
    state: directory
  become: True

- name: "install asdf"
  git:
    repo: "https://github.com/asdf-vm/asdf.git"
    dest: "{{ asdf_dir }}"
    version: "{{ asdf_version }}"
  become: True
  become_user: "{{ asdf_user }}"

- name: "create asdf source script"
  template:
    src: "asdf.sh.j2"
    dest: "{{ asdf_script }}"
    owner: "{{ asdf_user }}"
    group: "{{ asdf_group }}"
    mode: 0755
  become: True

# TODO: test
- name: "add asdf source script to shell configs"
  ansible.builtin.lineinfile:
    dest: "{{ home_dir }}/{{ item }}"
    state: present
    regexp: '^source {{ asdf_script }}$'
    firstmatch: true
    line: "source {{ asdf_script }}"
    insertafter: EOF
    backup: true
  become: true
  become_user: "{{ asdf_user }}"
  loop:
    - .bashrc
    - .zshrc
  when: ansible_facts.user_shell is search(item | regex_replace('^\\.', ''))
  tags: qa
